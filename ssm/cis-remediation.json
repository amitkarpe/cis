{
  "schemaVersion": "2.2",
  "description": "CIS Benchmark Remediation for Amazon Linux 2",
  "parameters": {
    "Group": {
      "type": "String",
      "description": "CIS Group to remediate (1-6, or 'all')",
      "default": "all",
      "allowedValues": [
        "1",
        "2", 
        "3",
        "4",
        "5",
        "6",
        "all"
      ]
    },
    "S3Bucket": {
      "type": "String",
      "description": "S3 bucket containing CIS scripts",
      "default": "trust-dev-team2"
    },
    "S3KeyPrefix": {
      "type": "String", 
      "description": "S3 key prefix for CIS scripts",
      "default": "vapt/setup/cis-scripts"
    },
    "DryRun": {
      "type": "String",
      "description": "Run in dry-run mode (true/false)",
      "default": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "LogLevel": {
      "type": "String",
      "description": "Logging level",
      "default": "INFO",
      "allowedValues": [
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "setupEnvironment",
      "inputs": {
        "timeoutSeconds": "300",
        "runCommand": [
          "#!/bin/bash",
          "set -euo pipefail",
          "",
          "# Setup variables",
          "export GROUP='{{ Group }}'",
          "export S3_BUCKET='{{ S3Bucket }}'", 
          "export S3_KEY_PREFIX='{{ S3KeyPrefix }}'",
          "export DRY_RUN='{{ DryRun }}'",
          "export LOG_LEVEL='{{ LogLevel }}'",
          "export WORK_DIR='/tmp/cis-remediation'",
          "export LOG_FILE='/var/log/cis-remediation.log'",
          "export BACKUP_DIR='/var/backups/cis'",
          "",
          "# Create working directories",
          "mkdir -p \"$WORK_DIR\" \"$BACKUP_DIR\"",
          "chmod 755 \"$WORK_DIR\" \"$BACKUP_DIR\"",
          "",
          "# Initialize log file",
          "touch \"$LOG_FILE\"",
          "chmod 644 \"$LOG_FILE\"",
          "",
          "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [SETUP] CIS remediation started - Group: $GROUP, DryRun: $DRY_RUN\" | tee -a \"$LOG_FILE\"",
          "",
          "# Install required packages",
          "if ! command -v aws >/dev/null 2>&1; then",
          "    yum install -y awscli",
          "fi"
        ]
      }
    },
    {
      "action": "aws:runShellScript", 
      "name": "downloadScripts",
      "inputs": {
        "timeoutSeconds": "600",
        "runCommand": [
          "#!/bin/bash",
          "set -euo pipefail",
          "",
          "# Load environment",
          "export WORK_DIR='/tmp/cis-remediation'",
          "export LOG_FILE='/var/log/cis-remediation.log'",
          "cd \"$WORK_DIR\"",
          "",
          "log_info() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [DOWNLOAD] $*\" | tee -a \"$LOG_FILE\"",
          "}",
          "",
          "log_error() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] [DOWNLOAD] $*\" | tee -a \"$LOG_FILE\" >&2",
          "}",
          "",
          "# Download scripts from S3",
          "log_info \"Downloading CIS scripts from s3://$S3_BUCKET/$S3_KEY_PREFIX\"",
          "",
          "if aws s3 sync \"s3://$S3_BUCKET/$S3_KEY_PREFIX/\" . --exclude '*.md' --exclude '.*'; then",
          "    log_info \"Scripts downloaded successfully\"",
          "else",
          "    log_error \"Failed to download scripts from S3\"",
          "    exit 1",
          "fi",
          "",
          "# Make scripts executable",
          "find . -name '*.sh' -type f -exec chmod +x {} \\;",
          "log_info \"Made scripts executable\"",
          "",
          "# List downloaded files",
          "log_info \"Downloaded files:\"",
          "find . -type f | tee -a \"$LOG_FILE\""
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "filterScripts", 
      "inputs": {
        "timeoutSeconds": "300",
        "runCommand": [
          "#!/bin/bash",
          "set -euo pipefail",
          "",
          "# Load environment",
          "export WORK_DIR='/tmp/cis-remediation'",
          "export LOG_FILE='/var/log/cis-remediation.log'",
          "cd \"$WORK_DIR\"",
          "",
          "log_info() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [FILTER] $*\" | tee -a \"$LOG_FILE\"",
          "}",
          "",
          "log_warn() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [WARN] [FILTER] $*\" | tee -a \"$LOG_FILE\"",
          "}",
          "",
          "# Create script execution list",
          "SCRIPT_LIST=\"$WORK_DIR/scripts_to_run.txt\"",
          "> \"$SCRIPT_LIST\"",
          "",
          "# Function to check if script should be included",
          "should_include_script() {",
          "    local script_id=\"$1\"",
          "    local include_file=\"config/include.txt\"",
          "    local exclude_file=\"config/exclude.txt\"",
          "    ",
          "    # Check exclude list first",
          "    if [[ -f \"$exclude_file\" ]]; then",
          "        if grep -q \"^$script_id$\" \"$exclude_file\" 2>/dev/null; then",
          "            return 1  # Excluded",
          "        fi",
          "        # Check wildcard exclusions",
          "        local group_prefix=\"${script_id%%.*}\"",
          "        if grep -q \"^${group_prefix}\\.\\*$\" \"$exclude_file\" 2>/dev/null; then",
          "            return 1  # Excluded by wildcard",
          "        fi",
          "    fi",
          "    ",
          "    # Check include list",
          "    if [[ -f \"$include_file\" ]]; then",
          "        if grep -q \"^$script_id$\" \"$include_file\" 2>/dev/null; then",
          "            return 0  # Included",
          "        fi",
          "        # Check wildcard inclusions",
          "        local group_prefix=\"${script_id%%.*}\"",
          "        if grep -q \"^${group_prefix}\\.\\*$\" \"$include_file\" 2>/dev/null; then",
          "            return 0  # Included by wildcard",
          "        fi",
          "        return 1  # Not in include list",
          "    fi",
          "    ",
          "    return 0  # Include by default if no include file",
          "}",
          "",
          "# Find and filter scripts based on group parameter",
          "if [[ \"$GROUP\" == \"all\" ]]; then",
          "    SEARCH_PATTERN=\"scripts/*/[0-9]*.sh\"",
          "else",
          "    SEARCH_PATTERN=\"scripts/$GROUP/[0-9]*.sh\"",
          "fi",
          "",
          "log_info \"Filtering scripts for group: $GROUP\"",
          "",
          "for script in $SEARCH_PATTERN; do",
          "    if [[ -f \"$script\" ]]; then",
          "        # Extract CIS ID from filename",
          "        script_name=$(basename \"$script\" .sh)",
          "        ",
          "        if should_include_script \"$script_name\"; then",
          "            echo \"$script\" >> \"$SCRIPT_LIST\"",
          "            log_info \"Included: $script_name\"",
          "        else",
          "            log_warn \"Excluded: $script_name\"",
          "        fi",
          "    fi",
          "done",
          "",
          "# Sort scripts by CIS ID for proper execution order",
          "sort -V \"$SCRIPT_LIST\" -o \"$SCRIPT_LIST\"",
          "",
          "script_count=$(wc -l < \"$SCRIPT_LIST\")",
          "log_info \"Total scripts to execute: $script_count\"",
          "",
          "if [[ $script_count -eq 0 ]]; then",
          "    log_warn \"No scripts found to execute\"",
          "    exit 0",
          "fi"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "executeScripts",
      "inputs": {
        "timeoutSeconds": "3600",
        "runCommand": [
          "#!/bin/bash",
          "set -euo pipefail",
          "",
          "# Load environment", 
          "export WORK_DIR='/tmp/cis-remediation'",
          "export LOG_FILE='/var/log/cis-remediation.log'",
          "export BACKUP_DIR='/var/backups/cis'",
          "cd \"$WORK_DIR\"",
          "",
          "log_info() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [EXECUTE] $*\" | tee -a \"$LOG_FILE\"",
          "}",
          "",
          "log_error() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] [EXECUTE] $*\" | tee -a \"$LOG_FILE\" >&2",
          "}",
          "",
          "log_success() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] [EXECUTE] $*\" | tee -a \"$LOG_FILE\"",
          "}",
          "",
          "# Initialize counters",
          "total_scripts=0",
          "successful_scripts=0", 
          "failed_scripts=0",
          "skipped_scripts=0",
          "",
          "# Execute each script",
          "SCRIPT_LIST=\"$WORK_DIR/scripts_to_run.txt\"",
          "",
          "if [[ ! -f \"$SCRIPT_LIST\" ]]; then",
          "    log_error \"Script list not found: $SCRIPT_LIST\"",
          "    exit 1",
          "fi",
          "",
          "while IFS= read -r script_path; do",
          "    if [[ -z \"$script_path\" ]]; then",
          "        continue",
          "    fi",
          "    ",
          "    ((total_scripts++))",
          "    script_name=$(basename \"$script_path\")",
          "    ",
          "    log_info \"Executing script: $script_name\"",
          "    ",
          "    # Set environment variables for the script",
          "    export LOG_FILE DRY_RUN BACKUP_DIR",
          "    ",
          "    # Execute the script",
          "    if timeout 300 bash \"$script_path\"; then",
          "        ((successful_scripts++))",
          "        log_success \"Script completed successfully: $script_name\"",
          "    else",
          "        exit_code=$?",
          "        if [[ $exit_code -eq 0 ]]; then",
          "            # Script exited with 0 (already compliant)",
          "            ((skipped_scripts++))",
          "            log_info \"Script skipped (already compliant): $script_name\"",
          "        else",
          "            ((failed_scripts++))",
          "            log_error \"Script failed with exit code $exit_code: $script_name\"",
          "        fi",
          "    fi",
          "    ",
          "    # Brief pause between scripts",
          "    sleep 1",
          "    ",
          "done < \"$SCRIPT_LIST\"",
          "",
          "# Final summary",
          "log_info \"=== CIS Remediation Summary ===\"",
          "log_info \"Total scripts: $total_scripts\"",
          "log_info \"Successful: $successful_scripts\"",
          "log_info \"Skipped (compliant): $skipped_scripts\"",
          "log_info \"Failed: $failed_scripts\"",
          "",
          "if [[ $failed_scripts -gt 0 ]]; then",
          "    log_error \"Some scripts failed. Check the log for details.\"",
          "    exit 1",
          "else",
          "    log_success \"All scripts completed successfully\"",
          "fi"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "cleanup",
      "inputs": {
        "timeoutSeconds": "300",
        "runCommand": [
          "#!/bin/bash",
          "set -euo pipefail",
          "",
          "# Load environment",
          "export WORK_DIR='/tmp/cis-remediation'",
          "export LOG_FILE='/var/log/cis-remediation.log'",
          "",
          "log_info() {",
          "    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] [CLEANUP] $*\" | tee -a \"$LOG_FILE\"",
          "}",
          "",
          "# Upload logs to S3 if configured",
          "if [[ -n \"${S3_BUCKET:-}\" ]]; then",
          "    INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo 'unknown')",
          "    DATE_STAMP=$(date '+%d-%m-%y')",
          "    S3_LOG_PATH=\"s3://$S3_BUCKET/vapt/report/$INSTANCE_ID/$DATE_STAMP/\"",
          "    ",
          "    log_info \"Uploading logs to $S3_LOG_PATH\"",
          "    ",
          "    if aws s3 cp \"$LOG_FILE\" \"${S3_LOG_PATH}cis-remediation.log\"; then",
          "        log_info \"Log uploaded successfully\"",
          "    else",
          "        log_info \"Failed to upload log (continuing anyway)\"",
          "    fi",
          "fi",
          "",
          "# Clean up temporary files",
          "if [[ -d \"$WORK_DIR\" ]]; then",
          "    rm -rf \"$WORK_DIR\"",
          "    log_info \"Cleaned up working directory: $WORK_DIR\"",
          "fi",
          "",
          "log_info \"CIS remediation completed\"",
          "",
          "# Display final log location",
          "echo \"\"",
          "echo \"CIS Remediation completed.\"",
          "echo \"Log file: $LOG_FILE\"",
          "echo \"Backup directory: $BACKUP_DIR\"",
          "echo \"\""
        ]
      }
    }
  ]
}